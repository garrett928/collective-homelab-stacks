---
- name: Post K3s Setup - Core Services
  hosts: k8s_nodes
  become: true
  gather_facts: true
  
  vars:
    first_node: "{{ groups['k8s_nodes'][0] }}"
    
  tasks:
    # Install Python dependencies for Kubernetes modules via apt
    - name: Install Python Kubernetes dependencies via apt
      ansible.builtin.apt:
        name: 
          - python3-kubernetes
          - python3-yaml
        state: present
        update_cache: true
      when: inventory_hostname == first_node
      
    # Install Helm first
    - name: Download Helm installation script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0700'
      when: inventory_hostname == first_node
      
    - name: Install Helm
      ansible.builtin.command:
        cmd: /tmp/get_helm.sh
        creates: /usr/local/bin/helm
      when: inventory_hostname == first_node
      
    - name: Verify Helm installation
      ansible.builtin.command:
        cmd: helm version --short
      register: helm_version
      when: inventory_hostname == first_node
      
    - name: Display Helm version
      ansible.builtin.debug:
        msg: "Helm installed: {{ helm_version.stdout }}"
      when: inventory_hostname == first_node

    # Install Longhorn prerequisites on ALL nodes
    - name: Install Longhorn prerequisites
      ansible.builtin.apt:
        name:
          - open-iscsi
          - nfs-common
          - util-linux
        state: present
        update_cache: true
        
    - name: Enable and start iSCSI services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - open-iscsi
        - iscsid

    # Add UFW rules for K3s cluster networking
    - name: Allow K3s pod and service networks
      community.general.ufw:
        rule: allow
        from_ip: "{{ item }}"
        comment: "K3s cluster communication"
      loop:
        - "10.42.0.0/16"   # Pod CIDR  
        - "10.43.0.0/16"   # Service CIDR
        
    - name: Allow node-to-node communication
      community.general.ufw:
        rule: allow
        from_ip: "192.168.0.0/24"  # Your node network
        comment: "K3s node communication"
        
    - name: Allow DNS traffic for pods
      community.general.ufw:
        rule: allow
        port: "53"
        proto: "{{ item }}"
        src: "10.42.0.0/16"
        comment: "CoreDNS for pods"
      loop:
        - tcp
        - udp
        
    - name: Allow Longhorn specific ports
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
        src: "10.42.0.0/16"
        comment: "Longhorn communication"
      loop:
        - "9500"  # Backend API
        - "9502"  # Webhook/Health  
        - "9503"  # Recovery backend
        - "3260"  # iSCSI

    # Fresh Longhorn Installation 
    - name: Add Longhorn Helm repository
      kubernetes.core.helm_repository:
        name: longhorn
        repo_url: https://charts.longhorn.io
      delegate_to: "{{ first_node }}"
      run_once: true
      
    - name: Create Longhorn namespace
      kubernetes.core.k8s:
        name: longhorn-system
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ first_node }}"
      run_once: true
      
    - name: Install Longhorn via Helm
      kubernetes.core.helm:
        name: longhorn
        chart_ref: longhorn/longhorn
        release_namespace: longhorn-system
        create_namespace: true
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        values:
          defaultSettings:
            defaultDataPath: /var/lib/longhorn
            defaultReplicaCount: "2"
          persistence:
            defaultClass: true
            defaultClassReplicaCount: "2"
      delegate_to: "{{ first_node }}"
      run_once: true
      
    # ArgoCD Installation  
    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        name: argocd
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ first_node }}"
      run_once: true
      
    - name: Add ArgoCD Helm repository
      kubernetes.core.helm_repository:
        name: argo
        repo_url: https://argoproj.github.io/argo-helm
      delegate_to: "{{ first_node }}"
      run_once: true
      
    - name: Install ArgoCD via Helm
      kubernetes.core.helm:
        name: argocd
        chart_ref: argo/argo-cd
        release_namespace: argocd
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        values:
          server:
            service:
              type: ClusterIP
            ingress:
              enabled: true
              annotations:
                traefik.ingress.kubernetes.io/router.tls: "true"
              hosts:
                - host: argocd.ghart.space  # Add 'host:' key
                  paths:
                    - path: /
                      pathType: Prefix
              tls:
                - secretName: argocd-server-tls  # Add secretName for self-signed
                  hosts:
                    - argocd.ghart.space
      delegate_to: "{{ first_node }}"
      run_once: true
      
    - name: Wait for ArgoCD to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: argocd-server
        namespace: argocd
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      delegate_to: "{{ first_node }}"
      run_once: true
      
    - name: Get ArgoCD initial admin password
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: argocd-initial-admin-secret
        namespace: argocd
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      register: argocd_secret
      delegate_to: "{{ first_node }}"
      run_once: true
      
    - name: Verify Longhorn installation
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: longhorn-system
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ first_node }}"
      run_once: true
      
    - name: Display Longhorn status
      ansible.builtin.debug:
        msg: "Longhorn is installed and running in longhorn-system namespace"
      delegate_to: "{{ first_node }}"
      run_once: true
      
    - name: Display setup completion
      ansible.builtin.debug:
        msg: |
          ================================
          Post K3s Setup Complete!
          ================================
          
          Services Installed:
          - Longhorn: Distributed storage ready
          - ArgoCD: https://argocd.ghart.space (self-signed SSL)
          
          ArgoCD Login:
          Username: admin
          Password: {{ (argocd_secret.resources[0].data.password | b64decode) if argocd_secret.resources else 'Check manually with: kubectl get secret argocd-initial-admin-secret -n argocd -o yaml' }}
          
          Next Steps:
          1. Configure DNS: argocd.ghart.space -> 192.168.0.21
          2. Deploy infrastructure apps via ArgoCD:
             kubectl apply -f kubernetes/argocd-apps/root-app.yaml
          3. Access Longhorn UI at: https://longhorn.ghart.space (after ArgoCD deployment)
          4. Accept self-signed certificate warnings in browser
      delegate_to: "{{ first_node }}"
      run_once: true
