---
- name: Install Prometheus Node Exporter
  hosts: "{{ target_hosts | default('all') }}"
  become: yes
  vars:
    node_exporter_install_dir: /opt/node_exporter
    node_exporter_version: ""  # Will be set dynamically
  
  tasks:
    - name: Create node_exporter user
      user:
        name: node_exporter
        system: yes
        shell: /usr/sbin/nologin
        home: /nonexistent
        create_home: no
        state: present
      
    - name: Create install directory
      file:
        path: "{{ node_exporter_install_dir }}"
        state: directory
        owner: node_exporter
        group: node_exporter
        mode: '0755'
    
    - name: Get latest Node Exporter version
      uri:
        url: https://api.github.com/repos/prometheus/node_exporter/releases/latest
        return_content: yes
        timeout: 30
      register: node_exporter_latest
      retries: 3
      delay: 5
      
    - name: Set Node Exporter version
      set_fact:
        node_exporter_version: "{{ node_exporter_latest.json.tag_name | regex_replace('^v', '') }}"
      
    - name: Check if Node Exporter is installed
      stat:
        path: "{{ node_exporter_install_dir }}/node_exporter"
      register: node_exporter_binary
      
    - name: Check installed Node Exporter version
      shell: "{{ node_exporter_install_dir }}/node_exporter --version 2>&1 | head -1 | awk '{print $3}'"
      register: installed_version
      when: node_exporter_binary.stat.exists
      changed_when: false
      failed_when: false
      
    - name: Download and install Node Exporter
      block:
        - name: Download Node Exporter
          get_url:
            url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
            dest: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
            timeout: 60
          
        - name: Extract Node Exporter
          unarchive:
            src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
            dest: /tmp
            remote_src: yes
          
        - name: Install Node Exporter binary
          copy:
            src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
            dest: "{{ node_exporter_install_dir }}/node_exporter"
            owner: node_exporter
            group: node_exporter
            mode: '0755'
            remote_src: yes
          notify: Restart Node Exporter
          
        - name: Clean up downloaded files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
            - "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64"
      when: >
        not node_exporter_binary.stat.exists or
        (installed_version.stdout is defined and installed_version.stdout != node_exporter_version)
      
    - name: Install Node Exporter service file
      template:
        src: node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: '0644'
      notify: 
        - Reload systemd
        - Restart Node Exporter
      
    - name: Enable and start Node Exporter service
      systemd:
        name: node_exporter
        enabled: yes
        state: started
        daemon_reload: yes
  
  handlers:
    - name: Reload systemd
      systemd:
        daemon_reload: yes
        
    - name: Restart Node Exporter
      systemd:
        name: node_exporter
        state: restarted
